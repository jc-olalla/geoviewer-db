name: Catalog Provisioner

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: "GitHub Environment to provision (must exist and contain a DB_URL secret)"
        required: true
        default: "linux_laptop"
        type: string
      run_smoke_test:
        description: "Run ephemeral Postgres smoke test first?"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]

jobs:
  # 1) Optional smoke test against a throwaway Postgres 16
  smoke-test:
    if: ${{ inputs.run_smoke_test == 'true' }}
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build provisioner image
        run: docker build -f Dockerfile.migrator -t catalog-migrator:latest .

      - name: Bootstrap on ephemeral DB
        run: |
          docker run --rm \
            --add-host=host.docker.internal:host-gateway \
            -v "${GITHUB_WORKSPACE}/tenants.yaml:/work/tenants.yaml:ro" \
            catalog-migrator:latest \
            bootstrap --tenants /work/tenants.yaml \
            --admin-dsn "postgresql://postgres:postgres@host.docker.internal:5432/postgres"

  # 2) Provision the selected target (Supabase, warehouse, etc.)
  provision:
    runs-on: ubuntu-latest
    needs: [ smoke-test ]
    if: ${{ always() && (inputs.run_smoke_test == 'false' || needs.smoke-test.result == 'success') }}
    environment: ${{ inputs.target_environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build provisioner image
        run: docker build -f Dockerfile.migrator -t catalog-migrator:latest .

      - name: Bootstrap on target environment
        env:
          DB_URL: ${{ secrets.DB_URL }}   # pulled from the chosen Environment
        run: |
          docker run --rm \
            -v "${GITHUB_WORKSPACE}/tenants.yaml:/work/tenants.yaml:ro" \
            catalog-migrator:latest \
            bootstrap --tenants /work/tenants.yaml \
            --admin-dsn "${DB_URL}"
