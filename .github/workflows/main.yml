name: Catalog Provisioner

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: "Environment to provision (must exist and contain a DB_URL secret)"
        type: choice
        required: true
        default: supabase
        options:
          - supabase
          - linux_laptop
      run_smoke_test:
        description: "Run ephemeral Postgres smoke test first?"
        type: choice
        required: true
        default: "true"
        options: ["true", "false"]
      provision_runner:
        description: "Runner for the provision job"
        type: choice
        required: true
        default: github-hosted
        options:
          - github-hosted         # uses ubuntu-latest
          - self-hosted-linux-x64 # uses [self-hosted, Linux, X64]

jobs:
  # 1) Optional quick sanity check against a throwaway Postgres 16
  smoke-test:
    if: ${{ inputs.run_smoke_test == 'true' }}
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build provisioner image
        run: docker build -f Dockerfile.provisioner -t catalog-provisioner:latest .

      - name: Bootstrap on ephemeral DB
        run: |
          docker run --rm \
            --add-host=host.docker.internal:host-gateway \
            -v "${GITHUB_WORKSPACE}/tenants.yaml:/work/tenants.yaml:ro" \
            catalog-provisioner:latest \
            bootstrap --tenants /work/tenants.yaml \
            --admin-dsn "postgresql://postgres:postgres@host.docker.internal:5432/postgres"

      - name: Seed on ephemeral DB (after bootstrap)
        run: |
          docker run --rm \
            --add-host=host.docker.internal:host-gateway \
            -v "${GITHUB_WORKSPACE}/tenants.yaml:/work/tenants.yaml:ro" \
            catalog-provisioner:latest \
            seed --tenants /work/tenants.yaml

  # 2) Provision the selected target (Supabase, warehouse, laptop, etc.)
  provision:
    # Pick the runner from the dropdown:
    # - github-hosted         -> "ubuntu-latest"
    # - self-hosted-linux-x64 -> ["self-hosted","Linux","X64"]
    runs-on: ${{ inputs.provision_runner == 'github-hosted'
                && 'ubuntu-latest'
                || fromJSON('["self-hosted","Linux","X64"]') }}
    needs: [ smoke-test ]
    if: ${{ inputs.run_smoke_test == 'false' || needs.smoke-test.result == 'success' }}
    environment: ${{ inputs.target_environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build provisioner image
        run: docker build -f Dockerfile.provisioner -t catalog-provisioner:latest .

      - name: Bootstrap on target environment
        env:
          DB_URL: ${{ secrets.DB_URL }}   # pulled from the chosen Environment
        run: |
          docker run --rm \
            --add-host=host.docker.internal:host-gateway \
            -v "${GITHUB_WORKSPACE}/tenants.yaml:/work/tenants.yaml:ro" \
            catalog-provisioner:latest \
            bootstrap --tenants /work/tenants.yaml \
            --admin-dsn "${DB_URL}"

      - name: Seed on target (after bootstrap)
        run: |
          docker run --rm \
            --add-host=host.docker.internal:host-gateway \
            -v "${GITHUB_WORKSPACE}/tenants.yaml:/work/tenants.yaml:ro" \
            catalog-provisioner:latest \
            seed --tenants /work/tenants.yaml
